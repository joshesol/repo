import java.util.ArrayList;

/**
 * 
 * @author jsolom29
 *
 */
public class PasswordCheckerUtility extends Exception 
{
		
	/**
	 * Returns true if valid password. Throws exceptions for invalid passwords. 
	 * Valid if password is greater than or equal to 6 characters, has at least one digit, 
	 * has at least on upper-case alphabetic character, has at least on lower-case alphabetic character, 
	 * and has no more than two of the same character in a row.
	 *  
	 * @param pwdString
	 * @return
	 * @throws LengthException
	 * @throws NoUpperAlphaException
	 * @throws NoLowerAlphaException
	 * @throws NoDigitException
	 * @throws InvalidSequenceException
	 */
	public static boolean isValidPassword(String pwdString)  throws 
													LengthException, 
													NoUpperAlphaException, 
													NoLowerAlphaException, 
													NoDigitException, 
													InvalidSequenceException 
	{
		boolean valid = false;
		char[] checkNum = pwdString.toCharArray();
		boolean hasNum = false;
		boolean hasUpper = false;
		boolean hasLower = false;
		boolean repeat = false;
		
		char temp = ' ';
		char temp2 = ' ';
		
		//determines if password is less then 6 characters
		if (pwdString.length() < 6)
		{
			valid = false;
			
			throw new LengthException("The password must be at least 6 characters long");
		}
		
		
		
		//determines if password contains uppercase
		for (int i = 0; i < checkNum.length; i++)
		{
			if (Character.isUpperCase(checkNum[i]) == true)
			{
				hasUpper = true; 
				
			}
		}
		//gives result of upper check
		if (hasUpper != true)
		{
			throw new NoUpperAlphaException("The password must contain at least one uppercase alphabetic character");
		}
		
		
		//determines if password contains lowercase
		for (int i = 0; i < checkNum.length; i++)
		{
			if (Character.isLowerCase(checkNum[i]) == true)
			{
				hasLower = true; 
			
			}
		}
		//gives result of lower check
		if (hasLower != true)
		{
			throw new NoLowerAlphaException("The password must contain at least one lowercase alphabetic character");
		}
		
		//determines if password contains numbers 
				for (int i = 0; i < checkNum.length; i++)
				{
					if (Character.isDigit(checkNum[i]) == true)
					{
						hasNum = true; 
				
					}
						
				}
				//gives result of number check
				if (hasNum != true)
				{
					throw new NoDigitException("The password must contain at least one digit");
				}
		
		//determines if password has 3 of the same character in a row
		for (int i = 0; i < checkNum.length; i++)
		{
			
			
			if(checkNum[i] == (temp) && temp == temp2 && checkNum[i] == temp2)
			{
				repeat = true;

			}
			else if(checkNum[i] != temp || temp != temp2)
			{
				temp2 = temp;
				temp = checkNum[i];
			}
		}
		//gives result of sequence check
		if (repeat == true)
		{
			throw new InvalidSequenceException("The password cannot contain more than two of the same character in sequence.");
		}
		
		if (hasNum == true && hasUpper == true && hasLower == true && repeat == false)
		{
			valid = true;
		}
		
		return valid;
	}
	
	/**
	 * Return true if length of password is greater than or equal to 6 but less than or equal to 9 
	 * 
	 * @param pwdString
	 * @return
	 */
	public static boolean isWeakPassword(String pwdString)
	{
		boolean isWeak = false;
		
		if (pwdString.length() >= 6 && pwdString.length() <= 9)
		{
			isWeak = true;
		}
		
		return isWeak;
	}
	
	/**
	 * Returns an arraylist of invalid passwords (weak passwords are not considered invalid) 
	 * 
	 * @param pwdList
	 * @return
	 */
	public static ArrayList<String> invalidPasswords(ArrayList<String> pwdList) 
	{
		ArrayList<String> invalid = new ArrayList<String>();
		for (String password: pwdList) 
		{
			try 
			{
				isValidPassword(password);
			}
			catch(Exception e) 
			{
				invalid.add(password + " " + e.getMessage());
			}
		}
		return invalid;
	}
}
